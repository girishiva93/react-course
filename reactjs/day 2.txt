Folder Name - React Hooks and Advanced Topics 

5- useState - Simple Use Case 
 
filepath - tutorial -> 1-useState -> setup -> 1-error-example.js

import React from "react";

const ErrorExample = () => {
  let title = "Hello world";

  const handleClick = () => {
    title = "Title were Change";
    console.log(title);
  };
  return (
    <>
      <h2>{title}</h2>
      <button type="button" onClick={handleClick} className="btn">
        Change Title
      </button>
    </>
  );
};

export default ErrorExample;


App.js

import React from 'react';
import Setup from './tutorial/1-useState/setup/1-error-example';

function App () {
return (
<div className = 'container'>
<Setup /> 
</div>
);
}

export default App;

6- useState - Basics 

app.js

import Setup from './tutorial/1-useState/setup/2-useState-basics';

function App () { 

return(
<div className = 'container' >
<Setup />
</div>
};
}
export default App;

filepath - tutorial -> 1-useState -> setup -> 2-useState-basics.js

2-useState-basics.js

import React, {useState} from 'react;

const UseStateBasics = () => {

const [text, setText] = useState('random title');

const handleClick = () => {
if (text === "random text") {

   setText('hello world');
}
else{
setText('random title');
}
};
return (
<React.Fragment>
<h1>{text}</h1>
<button className = 'btn' onClick = {handleClick}> change title </button>
</Reac.Fragment>
);
};

export default UseStateBasics; 

//UseState = ["value", function]


7- General Rules of Hooks 
// Use 
// component name must be uppercase 
// must be in the function/component body
// cannot call conditionally 

8 - useState - Array Example  

app.js 

import Setup from './tutorial/1-useSatate/setup/3-useState-array;

function App () { 

return(
<div className = 'container' >
<Setup />
</div>
};
}

export default App;

3-useState-array.js

import React from 'react';
import {data} from '../../../data';

const UseStateArray = () => {
const [people, setPeople] = React.useState(data);
return <>
{
people.map((person) => {
console.log(person);
const {id, name } = person


const removeItem = (id) => {
let newPeople - people.filter((person) => person.id !== id)
setPeople(newPeople)
}


return <div key = {id} className = 'item' > 
<h4> {name} </h4> 
<button onClick = {() => removeItem(id)> remove</button>
</div>
);
})
}
<button className = "btn" onClick = {() => setPeople([])}>
clear Items
 </button>
</>

};

export default UseStateArray;

*********
data.js
export const data = [
{id:1,
name: 'john', },
{id:2,
name:'peter' },
{id: 3, 
name:'susan' },
{id:4, 
name: 'anna' },
];


*************************
9 - useState - Object Example 

import Setup from './tutorial/1-useSate/setup/4-useState-object';

function App () { 

return (
<div className = 'container'>
<Setup />
</div>
);
}
export default App; 

4-useState-object.js

import React, {useState} from 'react';

const UseStateObject = () =>{
const [person, setPerson] = useState({name:'peter', age:24, message:'random message',})

/// ...person - split function 

const changeMessage = () => {
setPerson({ ...person, message: 'hello world' });

};
 
return <>
<h3> {person.name}</h3>
<h3>{person.age}</h3>
<h3>{person.message}</h3>
<button className = 'btn' onClick = {changeMessage} >
change Message 
</button>
</>
);
};

export default UseStateObject;


10 - useState - multiple State Values 

const [name, setName] = useState('Shiva');
const [age, setAge] = useState(24);
const [message, setMessage] = useState('random message');

const changeMessage = () => {
setMessage('hello world');

};

return ( 
<>
<h3> {name} </h3>
<h3> {age} </h3>
<h3> {message} </h3>
</>

********************************
11. simple Counter

App.js

import Setup from './tutorial/1-useState/setup/5-useState-counter';


function App() {
return App () {
return (
<div className = 'container'>
<Setup />
</div>
);
}

export default App;


5-useState-counter.js


import React, {useState} from 'react';

const UseStateCounter = () => {
const [value, setValue] = useState(0);

const reset = () => {
setValue(0)
}

return <>
<section style = {{margin:'4rem 0' }}>
<h2> regular counter </h2>
<h1>{value}</h1>
<button className = "btn" onClick ={() => setValue(value -1)}> decrease </button>
<button className = "btn" onClick ={reset} > Reset </button>
<button className = "btn" {() => setValue(value + 1)}> Increase </button>

</section>
</>
);
};

export default UseStateCounter;

12 - Functional Update Form 

5-useState-counter.js

import React, {useState} from 'react';

const UseStateCounter = () => {
const [value, setValue] = useState(0);

const reset = () => {
setValue(0)
}

const complexIncrease = () => {

setTimeout(() => {
// setValue(value+1);
setValue((prevState) => {
return prevState + 1; 
});
}, 2000)

}

return <>
<section style = {{margin:'4rem 0' }}>
<h2> more complex counter </h2>
<h1>{value}</h1>
<button className = "btn" onCLick = {complexIncrease}> increase later</button>
</section>
</>
);
};

export default UseStateCounter;

*******************************************
14. useEffect Basics

path = './tutorial/2-useEffect/setup/1-useEffect-basics';

app.Js
import React from 'react';
import Setup from './tutorial/2-useEffect/setup/1-useEffect-basics';

function App () {
return ( 
<div className = 'container'> 
<Setup /> 
</div>
);
}
export default App;


1-useEffect-basics.js

import React, {useState, useEffect } from 'react';
// bydefault runs after every re-render 
// cleanup function 
// second parameter 

const UseEffectBasics = () => {

const [value, setValue] = useState(0);

useEffect (() => {
console.log('call useEffect');
document.title = `New Message (${value})`;
});

console.log('render component');
return (
<>
<h1>{value}</h1>
<button className = "btn" onClick = {() => setValue(value + 1)}>
click me
</button>
</> 
);
};

export default UseEffectBasics;


useEffect is used when we want to setup sideeffect and i.e. some work outside of the component 
*********************************** 
15 - useEffect - Conditional 

import React, {useState, useEffect } from 'react';

const UseEffectBasics = () => {

const [value, setValue] = useState(0);


useEffect (() => {
console.log('call useEffect');
if (value >= 1) {
document.title = `New Message (${value})`;
}});

console.log('render component');
return (
<>
<h1>{value}</h1>
<button className = "btn" onClick = {() => setValue(value + 1)}>
click me
</button>
</> 
);
};

export default UseEffectBasics;


15 - useEffect Dependency List


import React, {useState, useEffect } from 'react';

const UseEffectBasics = () => {

const [value, setValue] = useState(0);


useEffect (() => {
console.log('call useEffect');
if (value >= 1) {
document.title = `New Message (${value})`;
}
}, [value]);

useEffect (() => {
console.log('hello world');
}, []);

console.log('render component');
return (
<>
<h1>{value}</h1>
<button className = "btn" onClick = {() => setValue(value + 1)}>
click me
</button>
</> 
);
};

export default UseEffectBasics;

*******************************
17 - useEffect - Cleanup Function

2-useEffect-cleanup.js

import React, {useState, useEffect } from 'react';

//cleanup function 
//second agrument 

const UseEffectCleanup - () => {
const [size, setSize] = useState(window.innerwidth);

const checkSize = () => {
setSize(window.innerWidth)
}

useEffect (() => {
console.log('useEffect');
window.addEventListener('resize', checkSize)
// return () => {
// console.log('cleanup');
// window.removeEventListener('resize', checkSize)
// }
}, [])
cobsole.log('render');
return <> 
<h1> Window </h1>;
<h2> {size} PX </h2>
</>

};

export default useEffectCleanup;



*****************************

18. useEffect - Fetch Data

3-useEffect-fetch-data

App.js

import Setup from './tutorial/2-useEffect/setup/3-useEffect-fetch-data';

 aaru sabai same nai ho mathi ko 



3-useEffect-fetch-data.js 

import React, {useState, useEffect} from 'react';

const url = 'https://api.github.com/users';

// secind agrument 


const UseEffectSecondAgrument = () => {


const [users, setUsers] = useState([]);s

const getUsers = async () => {
	const response = await fetch(url);
	const users = await response.json();
	console.log(users);
	SetUsers(users);
}

useEffect(() => {
	getUsers();
}, [])

return ( 
<>
<h2> github UsersData </h2>;
{users.map((user) => {
const {id, login, avatar_url, html_url} = user
return <li key = {id}>
<img src = {avatar_url} alt = {login} />
<div> 
<h4> {login} </h4>
< a href = {html_url}> profile </a>
</div>
 </li>
})}
</>
);
};

export default UseEffectSecondArgument; 






