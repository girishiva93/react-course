Folder Name - React Hooks and Advanced Topics 

5- useState - Simple Use Case 
 
filepath - tutorial -> 1-useState -> setup -> 1-error-example.js

import React from "react";

const ErrorExample = () => {
  let title = "Hello world";

  const handleClick = () => {
    title = "Title were Change";
    console.log(title);
  };
  return (
    <>
      <h2>{title}</h2>
      <button type="button" onClick={handleClick} className="btn">
        Change Title
      </button>
    </>
  );
};

export default ErrorExample;


App.js

import React from 'react';
import Setup from './tutorial/1-useState/setup/1-error-example';

function App () {
return (
<div className = 'container'>
<Setup /> 
</div>
);
}

export default App;

6- useState - Basics 

app.js

import Setup from './tutorial/1-useState/setup/2-useState-basics';

function App () { 

return(
<div className = 'container' >
<Setup />
</div>
};
}
export default App;

filepath - tutorial -> 1-useState -> setup -> 2-useState-basics.js

2-useState-basics.js

import React, {useState} from 'react;

const UseStateBasics = () => {

const [text, setText] = useState('random title');

const handleClick = () => {
if (text === "random text") {

   setText('hello world');
}
else{
setText('random title');
}
};
return (
<React.Fragment>
<h1>{text}</h1>
<button className = 'btn' onClick = {handleClick}> change title </button>
</Reac.Fragment>
);
};

export default UseStateBasics; 

//UseState = ["value", function]


7- General Rules of Hooks 
// Use 
// component name must be uppercase 
// must be in the function/component body
// cannot call conditionally 

8 - useState - Array Example  

app.js 

import Setup from './tutorial/1-useSatate/setup/3-useState-array;

function App () { 

return(
<div className = 'container' >
<Setup />
</div>
};
}

export default App;

3-useState-array.js

import React from 'react';
import {data} from '../../../data';

const UseStateArray = () => {
const [people, setPeople] = React.useState(data);
return <>
{
people.map((person) => {
console.log(person);
const {id, name } = person


const removeItem = (id) => {
let newPeople - people.filter((person) => person.id !== id)
setPeople(newPeople)
}


return <div key = {id} className = 'item' > 
<h4> {name} </h4> 
<button onClick = {() => removeItem(id)> remove</button>
</div>
);
})
}
<button className = "btn" onClick = {() => setPeople([])}>
clear Items
 </button>
</>

};

export default UseStateArray;

*********
data.js
export const data = [
{id:1,
name: 'john', },
{id:2,
name:'peter' },
{id: 3, 
name:'susan' },
{id:4, 
name: 'anna' },
];


*************************
9 - useState - Object Example 

import Setup from './tutorial/1-useSate/setup/4-useState-object';

function App () { 

return (
<div className = 'container'>
<Setup />
</div>
);
}
export default App; 

4-useState-object.js

import React, {useState} from 'react';

const UseStateObject = () =>{
const [person, setPerson] = useState({name:'peter', age:24, message:'random message',})

/// ...person - split function 

const changeMessage = () => {
setPerson({ ...person, message: 'hello world' });

};
 
return <>
<h3> {person.name}</h3>
<h3>{person.age}</h3>
<h3>{person.message}</h3>
<button className = 'btn' onClick = {changeMessage} >
change Message 
</button>
</>
);
};

export default UseStateObject;


10 - useState - multiple State Values 

const [name, setName] = useState('Shiva');
const [age, setAge] = useState(24);
const [message, setMessage] = useState('random message');

const changeMessage = () => {
setMessage('hello world');

};

return ( 
<>
<h3> {name} </h3>
<h3> {age} </h3>
<h3> {message} </h3>
</>

********************************
11. simple Counter

App.js

import Setup from './tutorial/1-useState/setup/5-useState-counter';


function App() {
return App () {
return (
<div className = 'container'>
<Setup />
</div>
);
}

export default App;


5-useState-counter.js


import React, {useState} from 'react';

const UseStateCounter = () => {
const [value, setValue] = useState(0);

const reset = () => {
setValue(0)
}

return <>
<section style = {{margin:'4rem 0' }}>
<h2> regular counter </h2>
<h1>{value}</h1>
<button className = "btn" onClick ={() => setValue(value -1)}> decrease </button>
<button className = "btn" onClick ={reset} > Reset </button>
<button className = "btn" {() => setValue(value + 1)}> Increase </button>

</section>
</>
);
};

export default UseStateCounter;

12 - Functional Update Form 

5-useState-counter.js

import React, {useState} from 'react';

const UseStateCounter = () => {
const [value, setValue] = useState(0);

const reset = () => {
setValue(0)
}

const complexIncrease = () => {

setTimeout(() => {
// setValue(value+1);
setValue((prevState) => {
return prevState + 1; 
});
}, 2000)

}

return <>
<section style = {{margin:'4rem 0' }}>
<h2> more complex counter </h2>
<h1>{value}</h1>
<button className = "btn" onCLick = {complexIncrease}> increase later</button>
</section>
</>
);
};

export default UseStateCounter;

*******************************************
14. useEffect Basics

path = './tutorial/2-useEffect/setup/1-useEffect-basics';

app.Js
import React from 'react';
import Setup from './tutorial/2-useEffect/setup/1-useEffect-basics';

function App () {
return ( 
<div className = 'container'> 
<Setup /> 
</div>
);
}
export default App;


1-useEffect-basics.js

import React, {useState, useEffect } from 'react';
// bydefault runs after every re-render 
// cleanup function 
// second parameter 

const UseEffectBasics = () => {

const [value, setValue] = useState(0);

useEffect (() => {
console.log('call useEffect');
document.title = `New Message (${value})`;
});

console.log('render component');
return (
<>
<h1>{value}</h1>
<button className = "btn" onClick = {() => setValue(value + 1)}>
click me
</button>
</> 
);
};

export default UseEffectBasics;


useEffect is used when we want to setup sideeffect and i.e. some work outside of the component 
*********************************** 
15 - useEffect - Conditional 

import React, {useState, useEffect } from 'react';

const UseEffectBasics = () => {

const [value, setValue] = useState(0);


useEffect (() => {
console.log('call useEffect');
if (value >= 1) {
document.title = `New Message (${value})`;
}});

console.log('render component');
return (
<>
<h1>{value}</h1>
<button className = "btn" onClick = {() => setValue(value + 1)}>
click me
</button>
</> 
);
};

export default UseEffectBasics;


15 - useEffect Dependency List


import React, {useState, useEffect } from 'react';

const UseEffectBasics = () => {

const [value, setValue] = useState(0);


useEffect (() => {
console.log('call useEffect');
if (value >= 1) {
document.title = `New Message (${value})`;
}
}, [value]);

useEffect (() => {
console.log('hello world');
}, []);

console.log('render component');
return (
<>
<h1>{value}</h1>
<button className = "btn" onClick = {() => setValue(value + 1)}>
click me
</button>
</> 
);
};

export default UseEffectBasics;

*******************************
17 - useEffect - Cleanup Function

2-useEffect-cleanup.js

import React, {useState, useEffect } from 'react';

//cleanup function 
//second agrument 

const UseEffectCleanup - () => {
const [size, setSize] = useState(window.innerwidth);

const checkSize = () => {
setSize(window.innerWidth)
}

useEffect (() => {
console.log('useEffect');
window.addEventListener('resize', checkSize)
// return () => {
// console.log('cleanup');
// window.removeEventListener('resize', checkSize)
// }
}, [])
cobsole.log('render');
return <> 
<h1> Window </h1>;
<h2> {size} PX </h2>
</>

};

export default useEffectCleanup;



*****************************

18. useEffect - Fetch Data

3-useEffect-fetch-data

App.js

import Setup from './tutorial/2-useEffect/setup/3-useEffect-fetch-data';

 aaru sabai same nai ho mathi ko 



3-useEffect-fetch-data.js 

import React, {useState, useEffect} from 'react';

const url = 'https://api.github.com/users';

// secind agrument 


const UseEffectSecondAgrument = () => {


const [users, setUsers] = useState([]);s

const getUsers = async () => {
	const response = await fetch(url);
	const users = await response.json();
	console.log(users);
	SetUsers(users);
}

useEffect(() => {
	getUsers();
}, [])

return ( 
<>
<h2> github UsersData </h2>;
<ul className = 'users'>
{users.map((user) => {
const {id, login, avatar_url, html_url} = user
return <li key = {id}>
<img src = {avatar_url} alt = {login} />
<div> 
<h4> {login} </h4>
< a href = {html_url}> profile </a>
</div>
 </li>
})}
</ul>s
</>
);
};

export default UseEffectSecondArgument; 


19 - Multiple Return - Basics 

create folder and name it as - 3- conditional-rendering

App.js 

import from 'tutorial/3-conditional-rendering/setup/1-multiple-returns'

1-multiple-returns.js

import React, {useState, useEffect } from 'react';
const url = 'https://api.github.com/users.QuincyLarson';

const MultipleReturns = () => {

const [loading, setLoading] = useState(True);

if (loading) {
return <h2> Loading </h2>
}
return <h2> multiple returns </h2>;



};

export default MultipleReturns;
}

**********************************
20 - multiple Returns - Fetching Example s

1-multiple-returns.js

import React, {useState, useEffect } from 'react';
const url = 'https://api.github.com/users.QuincyLarson';

const MultipleReturns = () => {

const [isLoading, setIsLoading] = useState(False);
const [isError, setIsError] = useState(false);
const [user, setUser] = useState('default user');
 
useEffect (() => {
setIsLoading(true);
fetch(url)
.then((resp) => {
if(resp.status >=200 && resp.status <=299) {
return resp.json();
} else {
setIsLoading(false);
setIsError(true);
throw new Error (resp.statusText);
}
})

.then ((user) => {
const {login} = user;
setUser(login);
setIsLoading(false);
})
.cathc(( error ) => console.log(error));
}, []);

if (isLoading) {
return (
<div>
<h1> Loading...</h1>
</div>
)
}

if (isError) {
return (
<div>
<h1> Error...</h1>
</div>
)
}

return <h2> multiple returns </h2>;



};

export default MultipleReturns;
}
***********************************
21 - Short-Circuit Evaluation 

App.js 

import from 'tutorial/3-conditional-rendering/setup/2-short-circuit'

same as other code 

2-short-circuit.js

import React, {useState} from 'react';

const ShortCircuit = () => {
const [text, setText] = useState('');

const ShortCircuit = () => {
const [text, setText] = useState('');
const firstValue = text || 'hello world';
const secondValue = text && 'hello world';
console.log(secondValue);
}
return <>
// <h1> {firstValue} </h1> 
// <h1> value : {secondValue}</h1> 
<h1>{text || 'Shiva Giri'}</h1>
{text && <h1> Hello World </h1>} 
</>
}

export default ShortCircuit;

********************************
22. Ternary Operator 
  
import React, {useState} from 'react';

const ShortCircuit = () => {
const [text, setText] = useState('');
const [isError, setIsError] = useState(false);

return <>

<h1>{text || 'Shiva Giri'}</h1>
<button className = 'btn' onClick = {() => setIsError(!isError)}>
toggle error
</button>
{isError && <h1>Error...</h1>}
{isError ? <p>there is an error...</P : <div>
There is no Error 
 </div> } // Ternary Operator
</>
}

*****************************
23 - Show Hide Component 

App.js 

import from 'tutorial/3-conditional-rendering/setup/3-show-hide';

same as other code 

3-show-hide.js

import React, {useState, useEffect} from 'react';

const ShowHide = () => {
const [show setShow] = useState(false);

return <>
<button className = 'btn' onClick {() => setShow(!show)}> show/hide </button>
{show && <Item />}
</>
};

const Item = () => {
const [size, setSize] = useState (window.innerWidth);

const checkSize = () => {
setSize(window.innerWidth);
};

useEffect (() => {
window.addEventListener('resize', checkSize)
return () => {
window.removeEventListener('resize', checkSize);
};
}, [])

return (
<div style = {{marginTop: '2rem'}}>
<h1>Windiw</h1>
<h2>Size: {size} px </h2>
</div>
);
}

export default ShowHide;


**************************************

25 - Form Basic


App.js 

import from 'tutorial/4-forms/setup/1-controlled-inputs';

same as other code 


1-controlled-inputs.js

import React, { useState } from "react";

const ControlledInputs = () => {
  return <> 
<article>
<form className = ' form ' onSubmit = {handleSubmit}>
<div className = 'form-control'>
<label htmlFor = "firstName"> Name: </label> 
<input type = 'text' id='firstName' name = 'firstName' /> 
</div>
<div className = 'form-control'>
<label htmlFor = "email"> Email: </label> 
<input type = 'text' id='email' name = 'email' /> 
</div>
<button type = 'submit' > add person </button> 
</form>
</article>
</>
};

export default ControlledInputs;

*************************************
26 - Controlled Inputs

import React, { useState } from "react";

const ControlledInputs = () => {

  const [firstName, setFirstName] = useState("");
  const [email, setEmail] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log(firstName, email);
  };
  return (
    <>
      <article>
        <form className=" form " onSubmit={handleSubmit}>
          <div className="form-control">
            <label htmlFor="firstName"> Name: </label>
            <input
              type="text"
              id="firstName"
              name="firstName"
              value={firstName}
              onChange={(e) => setFirstName(e.target.value)}
            />
          </div>
          <div className="form-control">
            <label htmlFor="email"> Email: </label>
            <input
              type="text"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)} // yo rakhe si tei form ma lakhda value aauw xa
            />
          </div>
          <button type="submit"> add person </button>
        </form>
      </article>
      ;
    </>
  );
};

export default ControlledInputs;


**********************************
27. Adding Item to the List

import React, { useState } from "react";

const ControlledInputs = () => {

  const [firstName, setFirstName] = useState("");
  const [email, setEmail] = useState("");
  const [people, setPeople] = useState([]);
  
  const handleSubmit = (e) => {
    e.preventDefault();
    if (firstname && email){
//	console.log('submit the form')
const person = {id: new Date().getTime().toString(),firstName:firstName, email : email}
// console.log(person);
setPeople ( (people) => {
return [...people, person]
});
setFirstName('');
setEmail('');
}
else{
console.log('empty values');
}
  };
  return (
    <>
      <article>
        <form className=" form " onSubmit={handleSubmit}>
          <div className="form-control">
            <label htmlFor="firstName"> Name: </label>
            <input
              type="text"
              id="firstName"
              name="firstName"
              value={firstName}
              onChange={(e) => setFirstName(e.target.value)}
            />
          </div>
          <div className="form-control">
            <label htmlFor="email"> Email: </label>
            <input
              type="text"
              id="email"
              name="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)} // yo rakhe si tei form ma lakhda value aauw xa
            />
          </div>
          <button type="submit"> add person </button>
        </form>
{
people.map((person, index) => {
const {id, firstName, email} = person;
return <div className = 'item' key ={id}>
<h4>{firstName}</h4>
<p>{email}</p>
</div>
})
}
      </article>
      ;
    </>
  );
};

export default ControlledInputs;

***************************************
28 - Multiple Inputs

App.js 

import from 'tutorial/4-forms/setup/2-multiple-inputs';

same as other code 

2-multiple-inputs.js  
import React, { useState } from "react";

const ControlledInputs = () => {
  const [people, setPeople] = useState([]);
  const [person, setPerson] = useState({ firstName: "", email: "", age: "" });

  const handleChange = (e) => {
    const name = e.target.name; // yesle tei hamro input ma rakhe ko name vanne kura lako xa
    const value = e.target.value; // yesle tei hamro input  ma rakhe ko value vanne kura lako xa
    setPerson({ ...person, [name]: value }); // [name] yesari kina name rakheko vane hamro multiple inputs xa so multiple inputs ma hami lay firstname, email, age pass gareko xam
    // console.log(name, value);
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    if (person.firstName && person.email && person.age) {
      e.preventDefault();
      const newPeople = { ...person, id: new Date().getTime().toString() };
      setPeople([...people, newPeople]);
      //   form fill up garera submit garesi empty garne value
      setPerson({ firstName: "", email: "", age: "" });
    } else {
      console.log("Some field is missing ");
    }
  };
  return (
    <>
      <article>
        <form className=" form ">
          <div className="form-control">
            <label htmlFor="firstName"> Name: </label>
            <input
              type="text"
              id="firstName"
              name="firstName"
              value={person.firstName}
              onChange={handleChange}
            />
          </div>
          <div className="form-control">
            <label htmlFor="email"> Email: </label>
            <input
              type="text"
              id="email"
              name="email"
              value={person.email}
              onChange={handleChange}
            />
          </div>
          <div className="form-control">
            <label htmlFor="Age"> Age: </label>
            <input
              type="text"
              id="age"
              name="age"
              value={person.age}
              onChange={handleChange}
            />
          </div>
          <button type="submit" onClick={handleSubmit}>
            {" "}
            add person{" "}
          </button>
        </form>
        {people.map((person) => {
          const { id, firstName, email, age } = person;
          return (
            <div className="item" key={id}>
              <h4>{firstName}</h4>
              <p>{age}</p>
              <p>{email}</p>
            </div>
          );
        })}
      </article>
      ;
    </>
  );
};

export default ControlledInputs;

**************************************
30 - useRef

App.js

import SetUp from "./tutorial/5-useRef/setup/1-useRef-basics";
function App() {
  return (
    <div className="container">
      {/* <ErrorExample /> */}
      <SetUp />
    </div>
  );
}

export default App;



1-useRef-basics.js

import React, {useEffect, useRef} from "react";

const UseRefBasics = () => {
const refContainer = useRef(null);
const divContainer = useRef(null);

const handleSubmit = (e) => {
e.preventDefault();
console.log(refContainer.current.value);
console.log(divContainer.current);
}

useEffect (() => {
console.log(refContainer.current);
refContainer.current.focus();
});

  return <>
<form className = "form" onSubmit = {handleSubmit}>
<div>
<input type='text' ref = {refContainer} />
<button type = 'submit'> submit </button>
</div>
</form>
<div ref = {divContainer}>
hello world
</div>
 </>
};

export default UseRefBasics;

***********************************
32 - useReducer - useState setup

Folder Name - useReducer 

fileName - index.js
fileName - Modal.js

app.js

import SetUp from "./tutorial/6-useReducer/setup";
function App() {
  return (
    <div className="container">
      {/* <ErrorExample /> */}
      <SetUp />
    </div>
  );
}

export default App;import SetUp from "./tutorial/6-useReducer/setup";
function App() {
  return (
    <div className="container">
      {/* <ErrorExample /> */}
      <SetUp />
    </div>
  );
}

export default App;

index.js 

import React, { useState, useReducer } from "react";
import Modal from './Modal';

import {data} from '../../../data';

const Index = () => {
const [name, setName] = useState('')
const [people, setPeople] = useState(data);
const [showModal, setShowModal] = useState(false);

const handleSubmit = (e) => {
e.preventDefault();
if(name) {
setshowModal(true);
setPeople([...people], {id:new Date().getTime().toString(), name}]);
setName('');
}
else {
setshowModal(true);
}
}

  return <>
{showModal && <Modal />}
<form onSubmit = {handleSubmit}>
<div>
<input type = "text" value = {name} onChange{(e) => setName(e.target.value)} /> 
</div>
<button type'submit'> add</button>
</form>
{people.map((person) => {
return <div key = {person.id}>
<h4>{person.name}</h4>
</div>
})}
</>
};

export default Index;

Modal.js

import React, {useEffect} from 'react';

const Modal = () => {
return <div>i'm modal</div>
};

export default Modal;


********************************

33 - UseReducer - Refactor 

index.js

index.js 

import React, { useState, useReducer } from "react";
import Modal from './Modal';

import {data} from '../../../data';

//reducer function 

const reducer = (state, action) => {

}

const defaultState = {
people:[],
isModelOpen:false,
modalContent: 'hello world'
}

const Index = () => {
const [name, setName] = useState('');
const [state, dispatch] = useReducer(reducer,defaultState)

const handleSubmit = (e) => {
e.preventDefault();
if(name) {
 
}
else {

}
}

  return <>
{state.isModalOpen && <Modal modalContent = {state.modalContent} />}
<form onSubmit = {handleSubmit}>
<div>
<input type = "text" value = {name} onChange{(e) => setName(e.target.value)} /> 
</div>
<button type'submit'> add</button>
</form>
{
state.people.map((person) => {
return <div key = {person.id}>
<h4>{person.name}</h4>
</div>
})
}
</>
};

export default Index;

Modal.js 

import React, {useEffect} from 'react';

const Modal = ({modalContent}) => {
return <div className = 'modal'>
<p>{modalContent}</p>
</div>
};

export default Modal;

**********************************************8
34 - useReducer - Add Item 

index.js 


import React, { useState, useReducer } from "react";
import Modal from "./Modal";
// import { data } from "../../../data";

// Reducer Function
const reducer = (state, action) => {
  console.log(state);
  if (action.type === "ITEM_ADDED") {
    const newPeople = [...state.people, action.payload];
    return {
      ...state,
      people: newPeople,
      isModelOpen: true,
      modalContent: "Item Added",
    };
  }
  if (action.type === "NO_VALUE") {
    return { ...state, isModelOpen: true, modalContent: "The Field is empty" };
  }
  if (action.type === "CLOSE_MODAL") {
    return { ...state, isModelOpen: false };
  }
  if (action.type === "REMOVE_ITEM") {
    const newPeople = state.people.filter(
      (person) => person.id !== action.payload
    );
    return {
      ...state,
      people: newPeople,
      isModelOpen: true,
      modalContent: "Item has been Removed",
    };
  }
  // return state;
  throw new Error("No item were added");
};

const defaultState = {
  people: [],
  isModelOpen: false,
  modalContent: "",
};

const Index = () => {
  const [name, setName] = useState("");
  const [state, dispatch] = useReducer(reducer, defaultState);
  const handleSubmit = (e) => {
    e.preventDefault();
    if (name) {
      const newPeople = { id: new Date().getTime().toString(), name };
      dispatch({ type: "ITEM_ADDED", payload: newPeople });
      setName("");
    } else {
      dispatch({ type: "NO_VALUE" });
    }
  };

  const closeModal = () => {
    dispatch({ type: "CLOSE_MODAL" });
  };

  return (
    <>
      {state.isModelOpen && (
        <Modal modalContent={state.modalContent} closeModal={closeModal} />
      )}
      <form onSubmit={handleSubmit} className="form">
        <div>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
        </div>
        <button type="submit" className="btn">
          {" "}
          add
        </button>
      </form>
      {state.people.map((people) => {
        return (
          <div key={people.id} className="item">
            <h4>{people.name}</h4>
            <button
              type="button"
              onClick={() =>
                dispatch({ type: "REMOVE_ITEM", payload: people.id })
              }
            >
              Remove
            </button>
          </div>
        );
      })}
    </>
  );
};

export default Index;


Note: ...state -> yo kina gareko vane yedi hami lai old values change garnu parxa vani hami lay first ma pura value lai copy garnu parxa 
so ...state garesi hami lay state ma define gareko value haru sabai yesma aauw xa ani naya value ne sajilai add garna sakxam 


36 - Prop Drilling 

Folder Name - 7-prop-drilling 
FOlder Name - setup
file Name - 1-prop-drilling.js

app.js 

import React from 'react';
import Setup from './tutorial/7-prop-drilling/setup/1-prop-drilling';

function App(){
return (
<div className = 'container'>
<Setup />
</div>
);
}

1-prop-drilling.js

import React, {useState} from 'react';
import data from '../../../data';

const PropDrilling = () => {
const[people, setPeople] = useState(data);

const removePerson = (id) => {
setPeople ((people) => {
return people.filter((person) => person.id !== id)
})
}

return <srction>
<h3> prop drilling </h3> 
<list people = {people} removePerson = {removePerson} /> 
</section>
}

const List = ({people, removePerson }) => {
return<>
{people.map ((people) => {
return <singlePerson key = {people.id} {...person} removePerson = {removePerson } />
)}
</>
}

const singlePerson = (id, name, removePerson ) => {
return <div className = "item">
<h4>{name}</h4>
<button onClick = {()=> removePerson(id)}>remove
 </div>
}

export default PropDrilling;


*******************************
37 - Context Api useContext 

Folder Name - 8-useContext
Folder Name - setup 
file Name - 1-context-api

app.js 

import React from 'react';
import Setup from './tutorial/8-useContext/setup/1-context-api';

function App(){
return (
<div className = 'container'>
<Setup />
</div>
);
}



1-context-api

import React, {useState, useContext} from 'react';
import data from '../../../data';

const PersonContext = React.createContext();
// two component - provider, consumer


const ContextAPI= () => {
const[people, setPeople] = useState(data);

const removePerson = (id) => {
setPeople ((people) => {
return people.filter((person) => person.id !== id)
})
}

return <PersonContext.Provider value={{removePerson, people}}>
<h3> Context API/UseContext </h3> 
<list /> 
</PersonContext.Provider>
}

const List = () => {
const mainData= useContext(PersonContext)
return<>
{mainData.map ((people) => {
return <singlePerson key = {people.id} {...person} />
)}
</>
}

const singlePerson = (id, name) => {

const {removePerson}= useContext(PersonContext)

return <div className = "item">
<h4>{name}</h4>
<button onClick = {()=> removePerson(id)}>remove
 </div>
}

export default ContextAPI;

*************************************
39 - Custom Hooks - useFetch 

Folder Name - 9-custom-hooks 
Folder Name - setup
file name - 1-fetch-example.js 
file name - 2-useFetch.js

1-fetch-example.js 

import React, {useState, useEffect} from 'react';
import {useFetch} from './2-useFecth'

const url = 'https://course-api.netlify.app/api/javascript-store-product';

const Example = () => {
const {loading, products} = useFetch(url)
console.log(products); 
return(
<div>
<h2>{loading ? 'loading...' : 'data'}</h2>
</div>
)
}

2-useFetch.js

import {useState, useEffect} from 'react';

export const useFetch = (url) => {

const [loading, setLoading] = useState(true);
const[products, setProducts] = useState([]);

const getProducts = async () => {
const respond = await fetch(url);
const products = await response.json();
setProducts(products);
setLoading(false);
};

useEffect (() => {
getProducts();
},[url]);

return {loading, products}

}

**********************************
40 - PropTypes - Setup

Folder Name - 10-prop-types
Foler Name - setup 
file name - index.js 
file name - Product.js 
 
app.js 

import React from 'react';
import Setup from './tutorial/10-prop-types/setup';

function App(){
return (
<div className = 'container'>
<Setup />
</div>
);
}


index.js 

import React from 'react';
import Product from './Product';
import {useFetch} from '../../9-custom-hooks/final/2-useFetch';
const url = 'https.//course-api.netlify.app/api/react-prop-types-example'

const Index = () => {
const {product} = useFetch(url);
return{
<div>
<h2>Products</h2>
<section className='products'>
{
products.map((product) => {
return <Product key={product.id} {...product} />;

})
}
</section>
</div>
}
}

export default Index;

Product.js

import React from 'react';

const Product = ({image, name, price}) => {
return <article className = 'product'>
<h4> single product </h4>
// <img src={image.url} alt={name} />
// <h4< {name} </h4>
// <p>${price} </p>
</article>
}

export default Product;

***********************************
41 - PropTypes - Images

Product.js

import React from 'react';
import PropType from 'prop-types'
import defaultImage from '../../../assets/image.url'

const Product = ({image, name, price}) => {
return <article className = 'product'>
<img src={image.url} alt={name} />
<h4< {name} </h4>
<p>${price} </p>
</article>
}

Product.propType = {
image: PropTypes.object.isRequired,
name: PropTypes.string.isRequired,
price: PropTypes.string.isRequired
};

FolderName - assets 
- add file here

Product.defaultProps = {
name:'default name',
price: 3.99,
image: defaultImage
}

export default Product;

**********************************
42 - PropTypes - Default Values 


import React from 'react';
import PropType from 'prop-types'
import defaultImage from '../../../assets/image.url'

const Product = ({image, name, price}) => {
const url = image && image.url
return <article className = 'product'>
<img src={url || defaultImage} alt={name || 'default name'} />
<h4> {name} </h4>
<p>${price || 3.99} </p>
</article>
}

Product.propType = {
image: PropTypes.object.isRequired,
name: PropTypes.string.isRequired,
price: PropTypes.string.isRequired
};

FolderName - assets 
- add file here

//Product.defaultProps = {
//name:'default name',
//price: 3.99,
//image: defaultImage
//}

Note - rafce for props type  for shortcut, 

name : ptar -> PropTypes.array.isRequired,








